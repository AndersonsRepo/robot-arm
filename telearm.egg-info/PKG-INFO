Metadata-Version: 2.4
Name: telearm
Version: 0.1.0
Summary: 5-DOF robot arm control with kinematics and trajectory planning
License-Expression: MIT
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Requires-Dist: numpy>=1.20.0
Requires-Dist: scipy>=1.7.0
Requires-Dist: pyyaml>=6.0
Provides-Extra: hardware
Requires-Dist: pyserial>=3.5; extra == "hardware"
Provides-Extra: ros2
Requires-Dist: rclpy; extra == "ros2"
Provides-Extra: dev
Requires-Dist: pytest>=7.0; extra == "dev"
Requires-Dist: pytest-cov; extra == "dev"
Requires-Dist: pre-commit; extra == "dev"
Requires-Dist: black; extra == "dev"
Requires-Dist: ruff; extra == "dev"

# Telearm - 5-DOF Robot Arm Control System

A modular Python package for controlling a 5-degree-of-freedom serial robot arm with forward/inverse kinematics, motion control, and hardware abstraction.

## Quick Start

### Installation

```bash
# Install in development mode
pip install -e .

# Install with hardware support (Arduino communication)
pip install -e ".[hardware]"

# Install development dependencies
pip install -e ".[dev,hardware]"
```

### Basic Usage

```python
from telearm import load_from_config, NullServoDriver, MotionController
import numpy as np

# Load robot model from configuration
model = load_from_config()  # Uses config/robot.yaml
driver = NullServoDriver(model.n())  # Simulation mode
ctrl = MotionController(model, driver)

# Move to home position
ctrl.go_home()

# Plan Cartesian motion
q_start = driver.angles()
T_goal = np.eye(4)
T_goal[:3, 3] = [0.05, 0.0, 0.04]  # 5cm in X, 4cm in Z
q_final = ctrl.move_cartesian(q_start, T_goal, seconds=2.0)
```

### Command Line Interface

```bash
# Move to home position
telearm home

# Move to Cartesian position (x y z in meters)
telearm move 0.1 0.0 0.15

# Move to joint angles (radians)
telearm joints 0.1 0.0 0.0 0.0 0.0

# Check current status
telearm status

# Run calibration
telearm calibrate

# Use simulation mode (no hardware)
telearm --sim home
```

## Package Structure

### Core Package (`telearm/`)
- **`models.py`** - Joint specifications, DH parameters, and arm models with config loading
- **`kinematics.py`** - Forward kinematics and Jacobian computation
- **`ik.py`** - Inverse kinematics solver using damped least squares
- **`trajectory.py`** - Cubic time scaling trajectory generation
- **`control.py`** - Motion controller with hardware abstraction
- **`drivers/`** - Hardware drivers (simulation and serial Arduino)
- **`cli.py`** - Command-line interface for robot control

### Configuration (`config/`)
- **`robot.yaml`** - Robot parameters (DH, joint limits, home positions)
- **`pins.yaml`** - Hardware configuration (Arduino pins, PWM settings)

### Hardware (`firmware/`)
- **`arduino/telearm_driver/telearm_driver.ino`** - Arduino sketch for servo control

### ROS 2 Integration (`ros2/`)
- **`telearm_ros2/`** - ROS 2 package for RViz visualization
- **`launch/telearm_rviz.launch.py`** - Launch file for ROS 2 visualization
- **`urdf/telearm.urdf`** - URDF model for robot visualization

### Examples and Tests
- **`examples/`** - Example scripts and usage demonstrations
- **`tests/`** - Comprehensive pytest test suite
- **`docs/`** - Documentation (wiring, setup, safety)

## Development

### Setup Development Environment

```bash
# Install development dependencies
make dev

# Run tests
make test

# Run linting
make lint

# Format code
make format

# Clean build artifacts
make clean
```

### Testing

```bash
# Run all tests
pytest tests/

# Run with coverage
make test

# Test CLI commands
make cli-test
```

## Dependencies

### Core Dependencies
- `numpy>=1.20.0` - Mathematical operations
- `scipy>=1.7.0` - Advanced mathematical functions
- `pyyaml>=6.0` - Configuration file parsing

### Optional Dependencies
- `pyserial>=3.5` - Arduino communication (install with `[hardware]`)
- `rclpy` - ROS 2 integration (install with `[ros2]`)

### Development Dependencies
- `pytest>=7.0` - Testing framework
- `black` - Code formatting
- `ruff` - Fast Python linter

## Hardware Setup

1. **Arduino Setup**: Upload `firmware/arduino/telearm_driver/telearm_driver.ino`
2. **Wiring**: Connect servos to pins 3, 5, 6, 9, 10 (see [Wiring Guide](docs/wiring.md))
3. **Power**: Use external 5V supply (6A+ recommended)
4. **Configuration**: Adjust `config/robot.yaml` and `config/pins.yaml` as needed

See [Setup Guide](docs/setup.md) for detailed instructions.

## ROS 2 Integration (Optional)

```bash
# Install core telearm first
pip install -e .

# Build ROS 2 package
cd ros2/telearm_ros2
colcon build --packages-select telearm_ros2

# Launch visualization
ros2 launch telearm_ros2 telearm_rviz.launch.py
```

## Safety

**⚠️ Important**: Read the [Safety Guide](docs/safety.md) before operation.

- Always test in simulation mode first (`--sim`)
- Verify joint limits and workspace clearance
- Use proper power supply and wiring
- Keep emergency stop procedures ready

## License

MIT License - see LICENSE file for details.

## Contributing

1. Fork the repository
2. Create a feature branch
3. Make changes with tests
4. Run `make check` (lint + test)
5. Submit a pull request

## Support

- Check [documentation](docs/) for detailed guides
- Run `telearm --help` for CLI options
- Use `make test` to verify installation
- Report issues on GitHub
